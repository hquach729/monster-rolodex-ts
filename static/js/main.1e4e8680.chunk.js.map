{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","data","className","src","id","alt","name","email","CardList","map","item","SearchBox","handleChange","placeholder","type","onChange","App","state","monsters","searchField","event","setState","target","value","console","log","a","fetch","response","json","users","this","filteredMonster","filter","monster","toLocaleLowerCase","includes","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VASaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAG,+BAA0BF,EAAKG,GAA/B,0BACHC,IAAI,YAEL,6BAAKJ,EAAKK,OACV,4BAAIL,EAAKM,YCPEC,G,MAAW,SAAC,GAAD,IAAGP,EAAH,EAAGA,KAAH,OACvB,qBAAKC,UAAU,YAAf,SACED,EAAKQ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAoBT,KAAMS,GAAfA,EAAKN,WCJNO,G,MAAY,SAAC,GAAD,IACxBC,EADwB,EACxBA,aADwB,IAExBC,mBAFwB,MAEV,SAFU,SAIxB,uBACCX,UAAU,SACVY,KAAK,SACLD,YAAaA,EACbE,SAAUH,MCgEGI,G,kNAtCdC,MAAkB,CACjBC,SAAU,GACVC,YAAa,I,EAWdP,aAAe,SAACQ,GAEf,EAAKC,SAAS,CAAEF,YAAaC,EAAME,OAAOC,QAAS,WAClDC,QAAQC,IAAI,EAAKR,MAAME,iB,8FAXzB,8BAAAO,EAAA,sEACwBC,MAAM,8CAD9B,cACOC,EADP,gBAEqBA,EAASC,OAF9B,OAEOC,EAFP,OAGCC,KAAKV,SAAS,CAAEH,SAAUY,IAC1BN,QAAQC,IAAI,UAAWM,KAAKd,MAAMC,UAJnC,gD,0EAeA,WAAU,IAAD,EAC0Ba,KAAKd,MAA/BC,EADA,EACAA,SAAUC,EADV,EACUA,YACZa,EAAkBd,EAASe,QAAO,SAACC,GAAD,OACvCA,EAAQ5B,KAAK6B,oBAAoBC,SAASjB,EAAYgB,wBAEvD,OACC,sBAAKjC,UAAU,MAAf,UACC,iDACA,cAAC,EAAD,CACCW,YAAY,kBACZD,aAAcmB,KAAKnB,eAEpB,cAAC,EAAD,CAAUX,KAAM+B,W,GAjCFK,cC3BHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,CAAK3C,KAAK,sBAEX4C,SAASC,eAAe,SAMzBb,M","file":"static/js/main.1e4e8680.chunk.js","sourcesContent":["import type { Monster, Robot, Cat } from '../../App';\nimport './card.styles.css';\n\ntype HashRobot = Monster | Robot | Cat;\n\nexport interface CardProps<T> {\n\tdata: T;\n}\n\nexport const Card = ({ data }: CardProps<HashRobot>) => (\n\t<div className='card-container'>\n\t\t<img\n\t\t\tsrc={`https://robohash.org/${data.id}?set=set1&size=180x180`}\n\t\t\talt='monster'\n\t\t/>\n\t\t<h2>{data.name}</h2>\n\t\t<p>{data.email}</p>\n\t</div>\n);\n","import type { Monster, Robot, Cat } from '../../App';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport interface CardListProps<T> {\n\tdata: T[];\n}\n\ntype HashRobot = Monster | Robot | Cat;\nexport const CardList = ({ data }: CardListProps<HashRobot>) => (\n\t<div className='card-list'>\n\t\t{data.map((item) => (\n\t\t\t<Card key={item.id} data={item} />\n\t\t))}\n\t</div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\ninterface SearchBoxProps {\n\thandleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\tplaceholder?: string;\n}\n\nexport const SearchBox = ({\n\thandleChange,\n\tplaceholder = 'search',\n}: SearchBoxProps) => (\n\t<input\n\t\tclassName='search'\n\t\ttype='search'\n\t\tplaceholder={placeholder}\n\t\tonChange={handleChange} // pass event to parent\n\t/>\n);\n","import * as React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\ninterface AppProps {\n\tname: string;\n}\ntype User = {\n\tid: number;\n\tname: string;\n\tusername: string;\n\temail: string;\n\taddress: {\n\t\tstreet: string;\n\t\tsuite: string;\n\t\tcity: string;\n\t\tzipcode: string;\n\t\tgeo: {\n\t\t\tlat: string;\n\t\t\tlng: string;\n\t\t};\n\t};\n\tphone: string;\n\twebsite: string;\n\tcompany: {\n\t\tname: string;\n\t\tcatchPhrase: string;\n\t\tbs: string;\n\t};\n};\n\nexport interface Monster extends User {}\nexport interface Robot extends User {}\nexport interface Cat extends User {}\n\ntype AppState = {\n\tmonsters: Monster[];\n\tsearchField: string;\n};\n\nclass App extends React.Component<AppProps, AppState> {\n\tstate: AppState = {\n\t\tmonsters: [],\n\t\tsearchField: '',\n\t};\n\n\tasync componentDidMount() {\n\t\tconst response = await fetch('https://jsonplaceholder.typicode.com/users');\n\t\tconst users = await response.json();\n\t\tthis.setState({ monsters: users });\n\t\tconsole.log('monster', this.state.monsters);\n\t}\n\t// Use arrow functions on any class methods you define and aren't part of React (i.e. render(), componentDidMount()).\n\t// We need to bound our custom class method, so this refer to our App object state\n\thandleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t// arrow function automatically bind the this context where it first define\n\t\tthis.setState({ searchField: event.target.value }, () => {\n\t\t\tconsole.log(this.state.searchField);\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonster = monsters.filter((monster) =>\n\t\t\tmonster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monster Rolodex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='search monsters'\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList data={filteredMonster}></CardList>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App name='monster rolodex' />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}